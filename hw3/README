**Installation:**
sudo pip install networkx

**Settings:**
"ECMPBalancer.py" should be under "pox/ext/"
"runPox.sh" should be under "pox/"
"runTopology.sh" should be under "mininet/"
"randomTopology.py" should be under "mininet/"

**General explanations on the program:**
In the topology we use networkx for generating random topology.
Then we print the json file of the topology in the pox folder: "pox/ext" to let the controller read the file.

Then in the controller we read the file to hold the topology. That way we are able to be aware of the topology and calculate shortest path.

* I added a picture called "Graph and net.png" that shows the connection between the networkx and the actual topology.
You can see that hosts are painted in red and switches are painted in blue. And in the terminal you can see the for every edge in the graph there is edge in the topology.

* I decided to make rules every ARP request that come into the controller.
This is the way it works:
Let's say that h1 sends request for h2.
First, before the host sends any request he sends an ARP request. So there I answer him, and on the way I make a rules for routing all packets from h1 to h2. This route will stay permanent as long as the controller is runing, because this rules made after I calculated the shortest path, and I assume that nothing will change in the topology while the controller is working.
